var searchIndex = {};
searchIndex["mailparse"] = {"doc":"","items":[[3,"MailHeader","mailparse","A struct that represents a single header in the message. It holds slices into the raw byte array passed to parse_mail, and so the lifetime of this struct must be contained within the lifetime of the raw input. There are additional accessor functions on this struct to extract the data as Rust strings.",null,null],[3,"ParsedContentType","","A struct to hold a more structured representation of the Content-Type header. This is provided mostly as a convenience since this metadata is usually needed to interpret the message body properly.",null,null],[12,"mimetype","","The type of the data, for example \"text/plain\" or \"application/pdf\".",0,null],[12,"charset","","The charset used to decode the raw byte data, for example \"iso-8859-1\" or \"utf-8\".",0,null],[12,"params","","The additional params of Content-Type, e.g. filename and boundary. The keys in the map will be lowercased, and the values will have any enclosing quotes stripped.",0,null],[3,"ParsedContentDisposition","","A struct to hold a more structured representation of the Content-Disposition header. This is provided mostly as a convenience since this metadata is usually needed to interpret the message body properly.",null,null],[12,"disposition","","The disposition type of the Content-Disposition header. If this is an extension type, the string will be lowercased.",1,null],[12,"params","","The additional params of Content-Disposition, e.g. filename. The keys in the map will be lowercased, and the values will have any enclosing quotes stripped.",1,null],[3,"ParsedMail","","Struct that holds the structured representation of the message. Note that since MIME allows for nested multipart messages, a tree-like structure is necessary to represent it properly. This struct accomplishes that by holding a vector of other ParsedMail structures for the subparts.",null,null],[12,"headers","","The headers for the message (or message subpart).",2,null],[12,"ctype","","The Content-Type information for the message (or message subpart).",2,null],[12,"subparts","","The subparts of this message or subpart. This vector is only non-empty if ctype.mimetype starts with \"multipart/\".",2,null],[4,"MailParseError","","An error type that represents the different kinds of errors that may be encountered during message parsing.",null,null],[13,"QuotedPrintableDecodeError","","Data that was specified as being in the quoted-printable transfer-encoding could not be successfully decoded as quoted-printable data.",3,null],[13,"Base64DecodeError","","Data that was specified as being in the base64 transfer-encoding could not be successfully decoded as base64 data.",3,null],[13,"EncodingError","","An error occurred when converting the raw byte data to Rust UTF-8 string format using the charset specified in the message.",3,null],[13,"Generic","","Some other error occurred while parsing the message; the description string provides additional details.",3,null],[4,"DispositionType","","The possible disposition types in a Content-Disposition header. A more comprehensive list of IANA-recognized types can be found at https://www.iana.org/assignments/cont-disp/cont-disp.xhtml. This library only enumerates the types most commonly found in email messages, and provides the `Extension` value for holding all other types.",null,null],[13,"Inline","","Default value, indicating the content is to be displayed inline as part of the enclosing document.",4,null],[13,"Attachment","","A disposition indicating the content is not meant for inline display, but whose content can be accessed for use.",4,null],[13,"FormData","","A disposition indicating the content contains a form submission.",4,null],[13,"Extension","","Extension type to hold any disposition not explicitly enumerated.",4,null],[5,"dateparse","","Convert a date field from an email header into a UNIX epoch timestamp. This function handles the most common formatting of date fields found in email headers. It may fail to parse some of the more creative formattings.",null,{"inputs":[{"name":"str"}],"output":{"generics":["i64","str"],"name":"result"}}],[5,"parse_header","","Parse a single header from the raw data given. This function takes raw byte data, and starts parsing it, expecting there to be a MIME header key-value pair right at the beginning. It parses that header and returns it, along with the index at which the next header is expected to start. If you just want to parse a single header, you can ignore the second component of the tuple, which is the index of the next header. Error values are returned if the data could not be successfully interpreted as a MIME key-value pair.",null,null],[5,"parse_headers","","Parses all the headers from the raw data given. This function takes raw byte data, and starts parsing it, expecting there to be zero or more MIME header key-value pair right at the beginning, followed by two consecutive newlines (i.e. a blank line). It parses those headers and returns them in a vector. The normal vector functions can be used to access the headers linearly, or the MailHeaderMap trait can be used to access them in a map-like fashion. Along with this vector, the function returns the index at which the message body is expected to start. If you just care about the headers, you can ignore the second component of the returned tuple. Error values are returned if there was some sort of parsing error.",null,null],[5,"parse_content_type","","Helper method to parse a header value as a Content-Type header. Note that the returned object's `params` map will contain a charset key if a charset was explicitly specified in the header; otherwise the `params` map will not contain a charset key. Regardless, the `charset` field will contain a charset - either the one explicitly specified or the default of \"us-ascii\".",null,{"inputs":[{"name":"str"}],"output":{"name":"parsedcontenttype"}}],[5,"parse_content_disposition","","Helper method to parse a header value as a Content-Disposition header. The disposition defaults to \"inline\" if no disposition parameter is provided in the header value.",null,{"inputs":[{"name":"str"}],"output":{"name":"parsedcontentdisposition"}}],[5,"parse_mail","","The main mail-parsing entry point. This function takes the raw data making up the message body and returns a structured version of it, which allows easily accessing the header and body information as needed.",null,null],[8,"MailHeaderMap","","A trait that is implemented by the Vec returned by the parse_headers function. It provides a map-like interface to look up header values by their name.",null,null],[10,"get_first_value","","Look through the list of headers and return the value of the first one that matches the provided key. It returns Ok(None) if the no matching header was found. Header names are matched case-insensitively.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["option","mailparseerror"],"name":"result"}}],[10,"get_all_values","","Look through the list of headers and return the values of all headers matching the provided key. Returns an empty vector if no matching headers were found. The order of the returned values is the same as the order of the matching headers in the message. Header names are matched case-insensitively.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["vec","mailparseerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"quotedprintableerror"}],"output":{"name":"mailparseerror"}}],[11,"from","","",3,{"inputs":[{"name":"decodeerror"}],"output":{"name":"mailparseerror"}}],[11,"from","","",3,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"mailparseerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_key","","Get the name of the header. Note that header names are case-insensitive.",6,{"inputs":[{"name":"self"}],"output":{"generics":["string","mailparseerror"],"name":"result"}}],[11,"get_value","","Get the value of the header. Any sequences of newlines characters followed by whitespace are collapsed into a single space. In effect, header values wrapped across multiple lines are compacted back into one line, while discarding the extra whitespace required by the MIME format. Additionally, any quoted-printable words in the value are decoded.",6,{"inputs":[{"name":"self"}],"output":{"generics":["string","mailparseerror"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"dispositiontype"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"parsedcontentdisposition"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_body","","Get the body of the message as a Rust string. This function tries to unapply the Content-Transfer-Encoding if there is one, and then converts the result into a Rust UTF-8 string using the charset in the Content-Type (or \"us-ascii\" if the charset was missing or not recognized).",2,{"inputs":[{"name":"self"}],"output":{"generics":["string","mailparseerror"],"name":"result"}}],[11,"get_body_raw","","Get the body of the message as a Rust Vec. This function tries to unapply the Content-Transfer-Encoding if there is one, but won't do any charset decoding.",2,{"inputs":[{"name":"self"}],"output":{"generics":["vec","mailparseerror"],"name":"result"}}],[11,"get_content_disposition","","Returns a struct containing a parsed representation of the Content-Disposition header. The first header with this name is used, if there are multiple. See the `parse_content_disposition` method documentation for more details on the semantics of the returned object.",2,{"inputs":[{"name":"self"}],"output":{"generics":["parsedcontentdisposition","mailparseerror"],"name":"result"}}]],"paths":[[3,"ParsedContentType"],[3,"ParsedContentDisposition"],[3,"ParsedMail"],[4,"MailParseError"],[4,"DispositionType"],[8,"MailHeaderMap"],[3,"MailHeader"]]};
initSearch(searchIndex);
